{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { emailSignInStart, signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(user, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nfunction* signInWhenSignUpSuccess({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  try {\n    yield getSnapshotFromUserAuth(user, additionalData);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* signUp({\n  payload\n}) {\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = payload;\n\n  if (password !== confirmPassword) {\n    alert('Passwords do not match');\n    return;\n  }\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: displayName\n    }));\n  } catch (error) {\n    alert(error);\n    yield put(signUpFailure(error));\n  }\n}\n\nfunction* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInWhenSignUpSuccess);\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["D:/Proyectos/ecommerce/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","emailSignInStart","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","user","additionalData","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","userAuth","signOut","signInWhenSignUpSuccess","signUp","displayName","confirmPassword","alert","createUserWithEmailAndPassword","onSignUpSuccess","SIGN_UP_SUCCESS","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\nimport { \r\n    emailSignInStart,\r\n    signInSuccess,\r\n    signInFailure,\r\n    signOutSuccess,\r\n    signOutFailure,\r\n    signUpSuccess,\r\n    signUpFailure\r\n} from './user.actions';\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(user, additionalData) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, user, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data() }));\r\n    } catch(error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch(error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: {email, password}}) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nfunction* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nfunction* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch (error) {\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\nfunction* signInWhenSignUpSuccess({payload: {user, additionalData}}) {\r\n    try {\r\n        yield getSnapshotFromUserAuth(user, additionalData);\r\n    } catch (error) {\r\n        yield(put(signInFailure(error)));\r\n    }\r\n}\r\n\r\nfunction* signUp({payload}) {\r\n    const { displayName, email, password, confirmPassword } = payload;\r\n    if (password !== confirmPassword) {\r\n        alert('Passwords do not match');\r\n        return;\r\n    }\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n        yield put(signUpSuccess({user, additionalData: displayName}));\r\n    } catch (error) {\r\n        alert(error);\r\n        yield put(signUpFailure(error));\r\n    }\r\n}\r\n\r\nfunction* onSignUpSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInWhenSignUpSuccess)\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}