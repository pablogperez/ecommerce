{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDo39hxx7Op26qA_3H5R5IMAkmuJzdgzD4\",\n  authDomain: \"ecommerce-db-1.firebaseapp.com\",\n  databaseURL: \"https://ecommerce-db-1.firebaseio.com\",\n  projectId: \"ecommerce-db-1\",\n  storageBucket: \"ecommerce-db-1.appspot.com\",\n  messagingSenderId: \"527604631992\",\n  appId: \"1:527604631992:web:6b3f0a03e4b4fa1864a74d\",\n  measurementId: \"G-R4DNZR3TM0\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); //console.log(snapShot.data()); \n\n  if (!snapShot.exists) {\n    const {\n      email,\n      displayName\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating user', error.message);\n      alert(error);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocs = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEch(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["D:/Proyectos/ecommerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","email","displayName","createdAt","Date","set","error","console","log","message","alert","addCollectionAndDocs","collectionKey","objectsToAdd","collectionRef","collection","batch","forEch","obj","newDocRef","commit","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AAEA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAJyE,CAMzE;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAClB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdH,QAAAA,WADc;AAEdD,QAAAA,KAFc;AAGdE,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAQA,OAAOa,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACAC,MAAAA,KAAK,CAACJ,KAAD,CAAL;AACH;AACJ;;AACD,SAAOZ,OAAP;AACH,CA1BM;AA4BP,OAAO,MAAMiB,oBAAoB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AACvE,QAAMC,aAAa,GAAGnB,SAAS,CAACoB,UAAV,CAAqBH,aAArB,CAAtB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYM,aAAZ;AAEA,QAAME,KAAK,GAAGrB,SAAS,CAACqB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,MAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAAClB,GAAd,EAAlB;AACAoB,IAAAA,KAAK,CAACX,GAAN,CAAUc,SAAV,EAAqBD,GAArB;AACH,GAHD;AAKA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACH,CAXM;AAaPvC,QAAQ,CAACwC,aAAT,CAAuBvC,MAAvB;AAEA,OAAO,MAAMwC,IAAI,GAAGzC,QAAQ,CAACyC,IAAT,EAAb;AACP,OAAO,MAAM3B,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAM4B,QAAQ,GAAG,IAAI1C,QAAQ,CAACyC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe1C,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDo39hxx7Op26qA_3H5R5IMAkmuJzdgzD4\",\r\n    authDomain: \"ecommerce-db-1.firebaseapp.com\",\r\n    databaseURL: \"https://ecommerce-db-1.firebaseio.com\",\r\n    projectId: \"ecommerce-db-1\",\r\n    storageBucket: \"ecommerce-db-1.appspot.com\",\r\n    messagingSenderId: \"527604631992\",\r\n    appId: \"1:527604631992:web:6b3f0a03e4b4fa1864a74d\",\r\n    measurementId: \"G-R4DNZR3TM0\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n\r\n    //console.log(snapShot.data()); \r\n\r\n    if (!snapShot.exists) {\r\n        const { email, displayName } = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try {\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log('Error creating user', error.message);\r\n            alert(error);\r\n        }\r\n    }\r\n    return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocs = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    console.log(collectionRef);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEch( obj => {\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj)\r\n    });\r\n\r\n    return await batch.commit();\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}